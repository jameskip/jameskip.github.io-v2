{"version":3,"sources":["components/Contact.js","components/Thrivehive.js","components/Yeti.js","components/Education.js","components/Skills.js","App.js","serviceWorker.js","index.js"],"names":["props","id","src","sx","width","borderRadius","fontSize","fontWeight","color","App","className","scrollingSpeed","render","Wrapper","Contact","Thrivehive","Yeti","Education","Skills","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+RAGe,WAACA,GAAD,OACb,kBAAC,IAAD,CAAKC,GAAG,WACN,kBAAC,IAAD,CACEC,IACE,2EAEFC,GAAI,CACFC,MAAO,CAAC,OAAQ,OAChBC,aAAc,KAGlB,kBAAC,IAAD,CAAMC,SAAU,CAAC,EAAG,EAAG,GAAIC,WAAW,OAAOC,MAAM,WAAnD,aCXW,WAACR,GAAD,OACb,kBAAC,IAAD,CAAMC,GAAG,cACP,kBAAC,IAAD,CACEE,GAAI,CACFC,MAAO,CAAC,OAAQ,OAChBC,aAAc,GAEhBH,IACE,6EAGJ,kBAAC,IAAD,CAAMI,SAAU,CAAC,EAAG,EAAG,GAAIC,WAAW,OAAOC,MAAM,WAAnD,gBCXW,WAACR,GAAD,OACb,kBAAC,IAAD,CAAMC,GAAG,QACP,kBAAC,IAAD,CACEE,GAAI,CACFC,MAAO,CAAC,OAAQ,OAChBC,aAAc,GAEhBH,IACE,6EAGJ,kBAAC,IAAD,CAAMI,SAAU,CAAC,EAAG,EAAG,GAAIC,WAAW,OAAOC,MAAM,WAAnD,UCXW,WAACR,GAAD,OACb,kBAAC,IAAD,CAAMC,GAAG,aACP,kBAAC,IAAD,CACEE,GAAI,CACFC,MAAO,CAAC,OAAQ,OAChBC,aAAc,GAEhBH,IACE,6EAGJ,kBAAC,IAAD,CAAMI,SAAU,CAAC,EAAG,EAAG,GAAIC,WAAW,OAAOC,MAAM,WAAnD,eCXW,WAACR,GAAD,OACb,kBAAC,IAAD,CAAMC,GAAG,UACP,kBAAC,IAAD,CACEE,GAAI,CACFC,MAAO,CAAC,OAAQ,OAChBC,aAAc,GAEhBH,IACE,6EAGJ,kBAAC,IAAD,CAAMI,SAAU,CAAC,EAAG,EAAG,GAAIC,WAAW,OAAOC,MAAM,WAAnD,YC8BWC,MAnCf,WACE,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,kBAAC,IAAD,CACEC,eAAgB,IAChBC,OAAQ,kBACN,kBAAC,IAAcC,QAAf,KACE,yBAAKH,UAAU,WACb,kBAACI,EAAD,OAGF,yBAAKJ,UAAU,WACb,kBAACK,EAAD,OAGF,yBAAKL,UAAU,WACb,kBAACM,EAAD,OAGF,yBAAKN,UAAU,WACb,kBAACO,EAAD,OAGF,yBAAKP,UAAU,WACb,kBAACQ,EAAD,cCtBIC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASZ,OACP,kBAAC,IAAMa,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.705273d2.chunk.js","sourcesContent":["import React from \"react\";\nimport { Image, Box, Text } from \"rebass\";\n\nexport default (props) => (\n  <Box id=\"contact\">\n    <Image\n      src={\n        \"https://images.unsplash.com/photo-1462331940025-496dfbfc7564?w=2048&q=20\"\n      }\n      sx={{\n        width: [\"100%\", \"15%\"],\n        borderRadius: 8,\n      }}\n    />\n    <Text fontSize={[3, 4, 5]} fontWeight=\"bold\" color=\"primary\">\n      Contact\n    </Text>\n  </Box>\n);\n","import React from \"react\";\nimport { Card, Image, Text } from \"rebass\";\n\nexport default (props) => (\n  <Card id=\"thrivehive\">\n    <Image\n      sx={{\n        width: [\"100%\", \"15%\"],\n        borderRadius: 8,\n      }}\n      src={\n        \"https://images.unsplash.com/photo-1462331940025-496dfbfc7564?w=2048&q=20\"\n      }\n    />\n    <Text fontSize={[3, 4, 5]} fontWeight=\"bold\" color=\"primary\">\n      Thrivehive\n    </Text>\n  </Card>\n);\n","import React from \"react\";\nimport { Card, Image, Text } from \"rebass\";\n\nexport default (props) => (\n  <Card id=\"yeti\">\n    <Image\n      sx={{\n        width: [\"100%\", \"15%\"],\n        borderRadius: 8,\n      }}\n      src={\n        \"https://images.unsplash.com/photo-1462331940025-496dfbfc7564?w=2048&q=20\"\n      }\n    />\n    <Text fontSize={[3, 4, 5]} fontWeight=\"bold\" color=\"primary\">\n      YETI\n    </Text>\n  </Card>\n);\n","import React from \"react\";\nimport { Card, Image, Text } from \"rebass\";\n\nexport default (props) => (\n  <Card id=\"education\">\n    <Image\n      sx={{\n        width: [\"100%\", \"15%\"],\n        borderRadius: 8,\n      }}\n      src={\n        \"https://images.unsplash.com/photo-1462331940025-496dfbfc7564?w=2048&q=20\"\n      }\n    />\n    <Text fontSize={[3, 4, 5]} fontWeight=\"bold\" color=\"primary\">\n      Education\n    </Text>\n  </Card>\n);\n","import React from \"react\";\nimport { Card, Image, Text } from \"rebass\";\n\nexport default (props) => (\n  <Card id=\"skills\">\n    <Image\n      sx={{\n        width: [\"100%\", \"15%\"],\n        borderRadius: 8,\n      }}\n      src={\n        \"https://images.unsplash.com/photo-1462331940025-496dfbfc7564?w=2048&q=20\"\n      }\n    />\n    <Text fontSize={[3, 4, 5]} fontWeight=\"bold\" color=\"primary\">\n      Skills\n    </Text>\n  </Card>\n);\n","import React from \"react\";\nimport ReactFullpage from \"@fullpage/react-fullpage\";\nimport \"./App.css\";\nimport Contact from \"./components/Contact\";\nimport Thrivehive from \"./components/Thrivehive\";\nimport Yeti from \"./components/Yeti\";\nimport Education from \"./components/Education\";\nimport Skills from \"./components/Skills\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <ReactFullpage\n          scrollingSpeed={1000} /* Options here */\n          render={() => (\n            <ReactFullpage.Wrapper>\n              <div className=\"section\">\n                <Contact />\n              </div>\n\n              <div className=\"section\">\n                <Thrivehive />\n              </div>\n\n              <div className=\"section\">\n                <Yeti />\n              </div>\n\n              <div className=\"section\">\n                <Education />\n              </div>\n\n              <div className=\"section\">\n                <Skills />\n              </div>\n            </ReactFullpage.Wrapper>\n          )}\n        />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}